// lib/services/ai_theme_service.dart
import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'dart:typed_data';
import 'dart:convert';
import 'package:http/http.dart' as http;

class AIThemeService {
  static const String _apiKey = 'AIzaSyA2Iani8wy51jBPnXQpTG0_IK9oAEWmeiE';
  late final GenerativeModel _model;
  late final GenerativeModel _imageModel;

  AIThemeService() {
    _model = GenerativeModel(
      model: 'gemini-2.0-flash',
      apiKey: _apiKey,
      systemInstruction: Content.system('''
Eres un asistente especializado en generar contenido educativo para temas de f√≠sica.

Cuando te pidan generar un diagrama o imagen conceptual, debes:
1. Crear una descripci√≥n detallada del diagrama en texto
2. Incluir explicaciones de cada elemento visual
3. Sugerir c√≥mo se ver√≠a visualmente el concepto
4. Usar emojis y s√≠mbolos ASCII para representar elementos cuando sea posible

Cuando te hagan preguntas hipot√©ticas sobre un tema ("¬øQu√© pasar√≠a si...?"), debes:
1. Explicar el concepto f√≠sico involucrado
2. Describir las consecuencias o cambios
3. Dar ejemplos pr√°cticos
4. Mantener las explicaciones claras y educativas
5. Usar un tono conversacional y amigable

Siempre enf√≥cate en la f√≠sica y mant√©n las respuestas concisas pero informativas.
'''),
    );

    // Modelo espec√≠fico para generaci√≥n de im√°genes
    _imageModel = GenerativeModel(
      model: 'gemini-2.0-flash',
      apiKey: _apiKey,
      systemInstruction: Content.system('''
Eres un generador de prompts para crear im√°genes educativas de f√≠sica.

Cuando recibas un tema de f√≠sica, genera un prompt detallado en ingl√©s para crear una imagen educativa que incluya:
1. Estilo: "Educational illustration", "Scientific diagram", "Physics concept visualization"
2. Elementos visuales espec√≠ficos del tema
3. Colores educativos y profesionales
4. Etiquetas y anotaciones relevantes
5. Perspectiva clara y did√°ctica

El prompt debe ser conciso pero detallado, enfocado en la educaci√≥n y claridad visual.
'''),
    );
  }

  /// Genera un diagrama conceptual para un tema espec√≠fico
  Future<String> generateDiagram(String themeTitle, String themeContent) async {
    try {
      final prompt = '''
Bas√°ndote en el tema de f√≠sica: "$themeTitle"

Contenido del tema:
$themeContent

Genera un diagrama conceptual detallado que incluya:
1. Una descripci√≥n visual del diagrama principal
2. Elementos clave que debe contener
3. Explicaci√≥n de las relaciones entre elementos
4. Representaci√≥n ASCII o con emojis cuando sea posible
5. Colores sugeridos para diferentes partes
6. Etiquetas importantes que deber√≠a tener

Haz que sea educativo y f√°cil de entender para estudiantes.
''';

      final response = await _model.generateContent([Content.text(prompt)]);
      return response.text ?? 'No se pudo generar el diagrama. Intenta de nuevo.';
    } catch (e) {
      debugPrint('Error generating diagram: $e');
      return 'Error al generar el diagrama: ${e.toString()}';
    }
  }

  /// Responde preguntas hipot√©ticas sobre el tema
  Future<String> answerHypothetical(String question, String themeTitle, String themeContent) async {
    try {
      final prompt = '''
Tema de f√≠sica: "$themeTitle"

Contenido del tema:
$themeContent

Pregunta hipot√©tica del estudiante: "$question"

Responde de manera educativa explicando:
1. Los principios f√≠sicos involucrados
2. Qu√© cambiar√≠a o pasar√≠a en el escenario planteado
3. Ejemplos pr√°cticos o comparaciones
4. Consecuencias f√≠sicas del cambio propuesto

Mant√©n la respuesta clara, concisa y educativa.
''';

      final response = await _model.generateContent([Content.text(prompt)]);
      return response.text ?? 'No se pudo generar una respuesta. Intenta reformular tu pregunta.';
    } catch (e) {
      debugPrint('Error answering hypothetical: $e');
      return 'Error al procesar tu pregunta: ${e.toString()}';
    }
  }

  /// Genera explicaciones adicionales sobre conceptos espec√≠ficos
  Future<String> explainConcept(String concept, String themeTitle, String themeContent) async {
    try {
      final prompt = '''
Tema de f√≠sica: "$themeTitle"

Contenido del tema:
$themeContent

El estudiante quiere que expliques m√°s sobre: "$concept"

Proporciona una explicaci√≥n detallada que incluya:
1. Definici√≥n clara del concepto
2. C√≥mo se relaciona con el tema principal
3. Ejemplos cotidianos
4. F√≥rmulas relevantes (si aplica)
5. Analog√≠as √∫tiles para entender el concepto

Usa un lenguaje accesible y educativo.
''';

      final response = await _model.generateContent([Content.text(prompt)]);
      return response.text ?? 'No se pudo generar la explicaci√≥n. Intenta de nuevo.';
    } catch (e) {
      debugPrint('Error explaining concept: $e');
      return 'Error al explicar el concepto: ${e.toString()}';
    }
  }

  /// Genera un prompt para crear una imagen educativa del tema
  Future<String> generateImagePrompt(String themeTitle, String themeContent) async {
    try {
      final prompt = '''
Tema de f√≠sica: "$themeTitle"

Contenido del tema:
$themeContent

Genera un prompt en ingl√©s para crear una imagen educativa que visualice este concepto de f√≠sica. 
El prompt debe ser detallado y espec√≠fico para generar una imagen clara y educativa.
''';

      final response = await _imageModel.generateContent([Content.text(prompt)]);
      return response.text ?? 'No se pudo generar el prompt para la imagen.';
    } catch (e) {
      debugPrint('Error generating image prompt: $e');
      return 'Error al generar prompt de imagen: ${e.toString()}';
    }
  }

  /// Genera una imagen usando diferentes servicios de IA
  Future<Uint8List?> generateImage(String themeTitle, String themeContent) async {
    try {
      // Intentar primero con Pollinations AI (gratuito)
      final imageData = await _generateImageWithPollinations(themeTitle, themeContent);
      if (imageData != null) {
        return imageData;
      }

      // Si Pollinations falla, intentar con otros servicios
      debugPrint('Pollinations failed, trying alternatives...');
      
      return null;
    } catch (e) {
      debugPrint('Error generating image: $e');
      return null;
    }
  }

  /// Genera imagen usando Pollinations AI (servicio gratuito)
  Future<Uint8List?> _generateImageWithPollinations(String themeTitle, String themeContent) async {
    try {
      // Generar un prompt optimizado usando Gemini
      final promptResponse = await _model.generateContent([Content.text('''
Genera un prompt en ingl√©s de m√°ximo 150 caracteres para crear una imagen educativa de f√≠sica sobre: "$themeTitle"

El prompt debe incluir:
- "educational physics diagram"
- Conceptos clave del tema
- "clean style", "scientific illustration"
- "white background"

Hazlo conciso y espec√≠fico para generaci√≥n de im√°genes.
''')]);

      final prompt = promptResponse.text ?? 'educational physics diagram $themeTitle clean style white background';
      
      // Limpiar y optimizar el prompt para URL
      final cleanPrompt = prompt
          .replaceAll('"', '')
          .replaceAll('\n', ' ')
          .trim();

      // URL de Pollinations AI
      final url = 'https://image.pollinations.ai/prompt/${Uri.encodeComponent(cleanPrompt)}?width=800&height=600&model=flux';
      
      debugPrint('Generating image with prompt: $cleanPrompt');
      debugPrint('Pollinations URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: {
          'User-Agent': 'ProAula-EducationApp/1.0',
        },
      ).timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        debugPrint('Image generated successfully, size: ${response.bodyBytes.length} bytes');
        return response.bodyBytes;
      } else {
        debugPrint('Pollinations error: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      debugPrint('Error with Pollinations: $e');
      return null;
    }
  }

  /// Genera contenido visual completo (descripci√≥n + imagen conceptual)
  Future<Map<String, dynamic>> generateVisualContent(String themeTitle, String themeContent) async {
    try {
      // Generar descripci√≥n visual en espa√±ol
      final descriptionPrompt = '''
Tema de f√≠sica: "$themeTitle"

Contenido del tema:
$themeContent

Genera una descripci√≥n visual detallada de c√≥mo se ver√≠a un diagrama o ilustraci√≥n educativa de este tema.
Incluye:
1. üé® Elementos visuales principales
2. üè∑Ô∏è Etiquetas y anotaciones importantes  
3. üåà Colores sugeridos para diferentes elementos
4. üìê Disposici√≥n espacial y perspectiva
5. üí° Elementos destacados para facilitar el aprendizaje

Describe todo en espa√±ol de manera clara y educativa.
''';

      final descriptionResponse = await _model.generateContent([Content.text(descriptionPrompt)]);
      final description = descriptionResponse.text ?? 'No se pudo generar la descripci√≥n visual.';

      // Generar diagrama ASCII/Unicode art√≠stico
      final diagramPrompt = '''
Tema de f√≠sica: "$themeTitle"

Crea un diagrama visual usando caracteres ASCII/Unicode que represente este concepto de f√≠sica.
Usa s√≠mbolos como:
- Flechas: ‚Üí ‚Üê ‚Üë ‚Üì ‚Üó ‚Üò ‚Üô ‚Üñ
- Formas: ‚ñ† ‚ñ° ‚óè ‚óã ‚óÜ ‚óá ‚ñ≤ ‚ñ≥ ‚ñº ‚ñΩ
- L√≠neas: ‚îÄ ‚îÇ ‚îå ‚îê ‚îî ‚îò ‚îú ‚î§ ‚î¨ ‚î¥ ‚îº
- S√≠mbolos: ‚ö° üåä ‚≠ê üî• ‚ùÑÔ∏è ‚öõÔ∏è üî¨ ‚öôÔ∏è

Hazlo educativo y claro, con etiquetas en espa√±ol.
''';

      final diagramResponse = await _model.generateContent([Content.text(diagramPrompt)]);
      final asciiDiagram = diagramResponse.text ?? 'No se pudo generar el diagrama.';

      // Intentar generar imagen (placeholder por ahora)
      final imageData = await generateImage(themeTitle, themeContent);

      return {
        'description': description,
        'asciiDiagram': asciiDiagram,
        'imageData': imageData,
        'hasImage': imageData != null,
      };
    } catch (e) {
      debugPrint('Error generating visual content: $e');
      return {
        'description': 'Error al generar contenido visual: ${e.toString()}',
        'asciiDiagram': 'Error generando diagrama: ${e.toString()}',
        'imageData': null,
        'hasImage': false,
      };
    }
  }

  /// Genera contenido educativo general sobre el tema
  Future<String> generateEducationalContent(String themeTitle, String themeContent, String requestType) async {
    try {
      final prompt = '''
Tema de f√≠sica: "$themeTitle"

Contenido del tema:
$themeContent

Tipo de contenido solicitado: "$requestType"

Genera contenido educativo apropiado que complemente el tema principal.
Si es sobre diagramas, describe visualmente c√≥mo se ver√≠a.
Si es una pregunta, responde de manera educativa y clara.
Si es una explicaci√≥n, hazla detallada pero comprensible.

Mant√©n el enfoque en la f√≠sica y la educaci√≥n.
''';

      final response = await _model.generateContent([Content.text(prompt)]);
      return response.text ?? 'No se pudo generar el contenido solicitado.';
    } catch (e) {
      debugPrint('Error generating educational content: $e');
      return 'Error al generar contenido: ${e.toString()}';
    }
  }
}